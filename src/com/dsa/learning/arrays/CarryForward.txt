Q.Count Pairs a,g Given a char[] calculate number of pairs i j such that i<j && s[i] = 'a' && s[j] = 'g' All characters are lower case

ex: 0   1   2   3   4   5   6   7
    b   a   a   g   d   c   a   g
Pair : <1,3>,<1,7>,<2,3>,<2,7>,<6,7>
#Approach-1 -> brute-force O(N^2)

#Approach-2 -> carry-forward
Ex :   0        1       2       3       4       5       6       7       8
       a        d       g       a       g       a       g       f       g
     c=4       c=4     c=4     c=3     c=3     c=2     c=2     c=1     c=1
   ans=9     ans=5   ans=5   ans=5   ans=2   ans=2   ans=0   ans=0   ans=0

#Pseudo Code
int c = 0
int ans = 0
for(i=n-1;i>=0;i--){                    // iterate right to left
    if(s[i] == 'g')                     // maintain count of 'g'
        c++;
    else if(s[i] == 'a')
        ans += c;                      // when we find a, update ans
}
return ans;



Q.Given an array find the length of smallest subarray which contains both Min & Max of array

Ex :    0   1   2   3   4   5   6   7   8   9
       [1   2   3   1   3   4   6   4   6   3]

        min=1, max=6
        index : [3,8]
        index : [3,6]

        ans=4, len = end-start+1 (i.e 6-3+1 = 4)

#Pseudo code
find max,min
if(min == max)
return 1;

ans = N, minIndex = -1, maxIndex = -1 // initialise max/min to any number which is not the part of the array index

for(i=n-1;i>0;i--){
    if(arr[i]==min_value){
        minIndex = i;
        if(maxIndex != -1){
            len = maxIndex-minIndex
            ans = Math.min(len,ans)
        }
    }else if(arr[i]==maxValue){
        maxIndex = i;
        if(minIndex != -1){
            len = minIndex-maxIndex
            ans = Math.min(len,ans)
        }
    }
}

return ans
